stages:
  - lint
  - build
  # - test

variables:
  POSTGRES_USER: 'bitswan_backend'
  POSTGRES_PASSWORD: ''
  POSTGRES_DB: 'test_bitswan_backend'
  POSTGRES_HOST_AUTH_METHOD: trust
  CELERY_BROKER_URL: 'redis://redis:6379/0'
  DOCKER_REGISTRY: public.ecr.aws/bitswan
  AWS_DEFAULT_REGION: us-east-1
  DOCKER_HOST: tcp://docker:2375
  DOCKER_IMAGE: bitswan-backend

precommit:
  stage: lint
  image: python:3.11
  variables:
    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
  cache:
    paths:
      - ${PRE_COMMIT_HOME}
  before_script:
    - pip install -q pre-commit
  script:
    - pre-commit run --show-diff-on-failure --color=always --all-files

build docker:
  stage: build
  only:
    - master
    - main
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  services:
    - docker:dind
  before_script:
    - amazon-linux-extras install docker
    - yum install -y git
    - aws --version
    - docker --version
  script:
    - YEAR=$(date +%Y)
    - COMMIT_HASH=$(git rev-parse --short HEAD)
    - TAG=$YEAR-$CI_PIPELINE_IID-git-$COMMIT_HASH
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $DOCKER_REGISTRY

    - SERVICES=("django" "postgres" "awscli")
    - CONTEXTS=("./compose/production/django" "./compose/production/postgres" "./compose/production/aws")
    - IMAGES=("bitswan-backend-production-django" "bitswan-backend-production-postgres" "bitswan-backend-production-awscli")
    - USAGE_MESSAGES=""

    - |
      for i in "${!SERVICES[@]}"; do
        SERVICE=${SERVICES[$i]}
        CONTEXT=${CONTEXTS[$i]}
        DOCKERFILE=${DOCKERFILES[$i]}
        IMAGE=${IMAGES[$i]}
        FULL_IMAGE_NAME=$DOCKER_REGISTRY/$IMAGE:latest

        echo "Building and pushing image for $SERVICE"
        docker build -t $FULL_IMAGE_NAME --build-arg COMMIT_HASH=$COMMIT_HASH --build-arg BUILD_NO=$CI_JOB_ID -f $CONTEXT/Dockerfile .

        IMAGE_ID=$(docker images --no-trunc -q $DOCKER_REGISTRY/$IMAGE:latest)
        ID_TAG=$(echo $IMAGE_ID | sed 's/:/_/g')
        IMAGE_ID_TAG=$DOCKER_REGISTRY/$IMAGE:$ID_TAG

        docker tag $FULL_IMAGE_NAME $IMAGE_ID_TAG
        docker push $FULL_IMAGE_NAME
        docker push $IMAGE_ID_TAG

        echo "Image for $SERVICE pushed: $IMAGE_ID_TAG"
        USAGE_MESSAGES="${USAGE_MESSAGES}Now you can use $IMAGE_ID_TAG in your docker-compose file.\n"
      done

    - echo -e "Images built and pushed successfully. \n$USAGE_MESSAGES"
